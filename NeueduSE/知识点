一、成员变量与局部变量的区别
	1、位置不同：成员变量：类以内，成员方法以外
			     局部变量：成员方法内部
	2、初始化值不同：成员变量：在堆内存中，有默认初始化值，与数组默认初始化值相同
	                                 局部变量：没初始化值，必须手动初始化值，才能使用
	3、优先级顺序：在方法内，局部变量与成员变量同名时，优先使用的是局部变量
	4、初始化位置：成员变量：在堆中初始化
			         局部变量：在栈内存方法中
二、排序与查找算法
	1、二分法查找（排序完成的）
	2、希尔排序等
三、对数组或集合什么操作方法：
	1、集合：工具类（Collections）
	2、数组：工具类（Arrays类）
四、类同名问题
	写全路径名
五、保证I/O流的正常关闭
	在try()...catch()时，必须写finally，强制关闭
六、快速2乘2
	移位符
七、抽象类与接口的区别
	抽象类（abstract）：只能单引用
	接口（interface）：只有抽象的方法，没有具体实现的内容，能被多引用
八、垃圾回收机制
	垃圾：实例化对象，堆内存中
	虚拟机自动回收垃圾，作用域是堆内存，没有引用指向的堆内存空间被标记为垃圾
	提醒方式：system.gc()/Runtime.getRuntime().gc()
九、重载与重写的区别
	重写：在子类中，对父类方法的重写
	重载：在同一类中，方法名相同，参数个数或参数类型不同
十、对象的引用
	实例化对象，并对对象的属性进行操作
十一、匿名对象
	直接的new引用
十二、匿名内部类

十三、foreach与Iterator的区别

十四、static与public的区别
	static：在静态方法区中，先加载到静态方法区中，可以随时调用
	被static修饰的方法和属性，通过对象名.属性/方法（不推荐）或者类名.属性/方法（推荐）
	public：修饰符，可以在本项目中被任何一个包访问
十五、工厂模式

十六、高内聚低耦合
	内聚：每个模块尽可能独立完成自己的功能，不依赖于模块外部的代码
	耦合：模块与模块之间接口的复杂程度，模块之间联系越复杂耦合度越高
十七、进程与线程
	进程：操作系统动态执行的基本单元
	线程：
	多进程：
	多线程：
	进程与线程都有5种状态：1、New（新建状态）---> new Thread()
					2、Runnable（可运行状态/就绪态）--->new Thread().start()
					3、Running（运行状态）--->yield()--->直接把运行状态切换到可运行状态（体现不出效果）
					4、Block（阻塞状态）--->sleep()/join()会返回到可运行状态；wait()无限等待，直到唤醒--->notify/notifyall，进入锁定状态，在到可运行状态
					5、Dead（死亡状态）
十八、多线程的实现方式
	继承Thread类或实现Runnable接口
	1、一个类继承thread类，重写run()方法，调用start()方法激活线程
	2、类继承runnable接口，重写run方法，通过线程类将Runnable对象作为成员变量（相当于重写了run方法），调用线程对象的start()方法，激活新线程。
十九、线程的优先级
	线程：优先级高，不一定先执行优先级高的；
	线程优先级法法：getPriority()--->确定线程的优先级 /setPriority()--->设置线程的优先级  
二十、线程并发问题
	对线程加锁：方法锁：对实现方法加synchronized关键字
			同步代码块：
二十一、线程池
	线程池怎么创建：Executors创建线程池
	实现方式：实现Runnable接口/Callable接口
	区别：Runnable，实现run方法，没有返回值
		Callable，返回值是泛型中规定的类型
二十二、死锁
	死锁发生的前提条件：大于一个锁，锁嵌套锁，同步锁中嵌套了其他同步锁，使程序出现了无限等待
二十三、构造器（构造方法）
	没有返回值类型，方法名必须与类名相同
	在实例化对象是已经调用
	有参构造器，在实例化对象是，实例化对象中应该加一个参数（实参）
二十四、封装
	private是封装的一种属性,只能被类的内部访问
二十五、接口与抽象类的区别
	在java中是单继承，但是一个类可以实现多个接口
二十六、栈溢出
	递归调用时会出现
二十七、内部类（匿名内部类）
	
二十八、单例模式
	懒汉式、饿汉式、注入式
二十九、继承
	实例化子类：先调用父类构造器，再调拥子类构造器 
	
三十、super与this
	都存在与第一行，在构造方法中，在第一行中没有super(),默认有一个super().
	super指向父类的引用，this在本类中使用
三十一、final与static
	final：被修饰的变量不能修改变量值（常量）
		       被修饰的类不能被继承
		       被修饰的方法不能被重写（覆盖/复写）
三十二、abstract（抽象类）
	抽象类不能被实例化，能被单继承
	继承抽象类的类要重写抽象类中的抽象方法
	抽象类能继承抽象类，可以将符类的抽象方法继承过来
	有抽象方法的类一定是抽象类，抽象类可以没有抽象方法
	抽象类不能被final修饰
三十四、Interface（接口）
	只包含常量和抽象方法，没有变量和方法的实现（jdk 1.8以后可以有方法的实现）
	接口没有构造器，不能被实例化
	接口继承接口用extends，类继承接口用implements
三十五、多态
	上溯造型（向上转型）：父类引用指向子类（父类只能调用自己类中的方法）
	下溯造型（向下转型）：强制转换，将父类强制转换为子类，前提是经过向上转型
	instanceof 判断引用的类型（哪种类）
	存在的必要条件：1、继承关系
			   2、方法的重写
			   3、父类引用指向子类对象
	